Weather API dashboard
---------------------

Motivation
----------
This exercise is about getting in touch with the JavaScript testing framework  Mocha.js,
plus the assertion library chai.js.
Besides, the exercise is meant to deepen the experience with object oriented programming.

Task
----
We want to have a simple "dashboard", a HTML page, showing the weather status for a given group of cities.

It sould look like:

		City		: Stockholm
		Temperature	: 11° Celsius
		Wind		: calm
		...			: Mostly cloudy
	
Implementation
--------------
Please implement the following objects:

- city object (for the data of each city, one object)
- city list (collection), holding all city objects	
- API Connector/Fetcher
  This object has to be used to fetch data from the API 
  and provide it to the city objects
  
Please write for every publich method, for every object unit tests.

Tools
-----
Please make use of the following tools/libs:
- Bower, to deal with all libs/dependencies v
- jQuery v
- Mocha.js v
- Chai.js v
- Weather API http://openweathermap.org/ v
- sinon


If the weather API is for some reasons not a good choice, then please
pick another one from the following list:
	http://www.programmableweb.com/news/26-weather-apis-12-support-json/2012/01/11

==================
Ah, the cities:

Cities
------
- Redmond
- Cupertino
- Berlin
- Stockholm
- Gibraltar
However, it should be configurable. To make it easy for adding new cities, changing/removing exisiting ones

Ah and ... sorry, I forgot this tool ....

For Mocking test objects, please use Sinon.JS :
http://sinonjs.org/

A unit-test shall always only test the one given unit. Every dependency which is necessary for the test-subject ... has to be "mocked".

Mocking, in this context means:
The real object, which is in use within the normal implementation, has to be replaced with a dummy object.
 --> https://en.wikipedia.org/wiki/Mock_object

////////////////////////////////////////////////////////////
In this case, there 's the idea:

you test object makes use of another object.

-> "Another object" = this is an dependency

---> Dependencies have to be mocked.

So the idea is:
You're writing, or building (e.g. with Sinon.js)  a Fake Object for the dependency (in this case, the dataprovider).

and whilst testing the test subject (city), make sure that the test subject will use the fake object and not the real object (so not the dataprovider).

The fake object has to return fix values.